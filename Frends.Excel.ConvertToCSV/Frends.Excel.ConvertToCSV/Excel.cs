using System.ComponentModel;
using System.Data;
using System.Globalization;
using System.Text;
using ExcelDataReader;
using Frends.Excel.ConvertToCSV.Definitions;

namespace Frends.Excel.ConvertToCSV;
/// <summary>
/// Excel operation task.
/// </summary>
public static class Excel
{
    /// <summary>
    /// Converts Excel file to CSV. 
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.Excel.ConvertToCSV)
    /// </summary>
    /// <param name="input">Input configuration</param>
    /// <param name="options">Input options</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this task.</param>
    /// <returns>Object { bool Success, string CSV, string? ErrorMessage }</returns>
    public static Result ConvertToCSV([PropertyTab] Input input, [PropertyTab] Options options, CancellationToken cancellationToken)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(input.Path))
                throw new Exception("Path to excel file is missing.");
            if (!File.Exists(input.Path))
                throw new Exception("Excel file doesn't exists.");

            Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);

            using var stream = new FileStream(input.Path, FileMode.Open);
            using var excelReader = ExcelReaderFactory.CreateReader(stream);
            var result = excelReader.AsDataSet();
            var csv = ConvertDataSetToCSV(result, options, cancellationToken);
            return new Result(true, csv, null);
        }
        catch (Exception ex)
        {
            if (options.ThrowErrorOnFailure)
                throw new Exception("Error while converting Excel file to CSV", ex);

            return new Result(false, null, $"Error while converting Excel file to CSV: {ex}");
        }
    }

    private static string ConvertDataSetToCSV(DataSet result, Options options, CancellationToken cancellationToken)
    {
        var resultData = new StringBuilder();

        foreach (DataTable table in result.Tables)
        {
            // Read only wanted worksheets. If none is specified read all.
            if (!options.ShouldReadSheet(table.TableName))
                continue;

            for (var i = 0; i < table.Rows.Count; i++)
            {
                for (var j = 0; j < table.Columns.Count; j++)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    var item = table.Rows[i].ItemArray[j];
                    if (item != null && item.GetType().Name == "DateTime")
                        item = ConvertDateTimes((DateTime)item, options);

                    resultData.Append(item + options.CsvSeparator);
                }
                // Remove last CsvSeparator.
                resultData.Length--;
                resultData.Append(Environment.NewLine);
            }
        }
        return resultData.ToString();
    }

    private static string ConvertDateTimes(DateTime date, Options options)
    {
        // Modify the date using date format var in options.

        if (options.ShortDatePattern)
        {
            return options.DateFormat switch
            {
                DateFormats.DDMMYYYY => date.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture),
                DateFormats.MMDDYYYY => date.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture),
                DateFormats.YYYYMMDD => date.ToString("yyyy/MM/dd", CultureInfo.InvariantCulture),
                DateFormats.DEFAULT => date.ToString(CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern),
                _ => date.ToString(CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern),
            };
        }
        else
        {
            return options.DateFormat switch
            {
                DateFormats.DDMMYYYY => date.ToString("dd/MM/yyyy H:mm:ss", CultureInfo.InvariantCulture),
                DateFormats.MMDDYYYY => date.ToString("MM/dd/yyyy h:mm:ss tt", CultureInfo.InvariantCulture),
                DateFormats.YYYYMMDD => date.ToString("yyyy/MM/dd H:mm:ss", CultureInfo.InvariantCulture),
                DateFormats.DEFAULT => date.ToString(CultureInfo.CurrentCulture.DateTimeFormat),
                _ => date.ToString(CultureInfo.CurrentCulture.DateTimeFormat),
            };
        }
    }
}